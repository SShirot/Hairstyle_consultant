package com.example.hairstyle_consultant.services;

import android.util.Log;

import com.example.hairstyle_consultant.models.Product;
import com.google.android.gms.tasks.Task;
import com.google.firebase.firestore.CollectionReference;
import com.google.firebase.firestore.DocumentReference;
import com.google.firebase.firestore.DocumentSnapshot;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.Query;
import com.google.firebase.firestore.QuerySnapshot;

import java.util.ArrayList;
import java.util.List;

public class ProductService {
    private static final String TAG = "ProductService";
    private static final String COLLECTION_NAME = "products";
    private final FirebaseFirestore db;
    private final CollectionReference productsCollection;

    public ProductService() {
        db = FirebaseFirestore.getInstance();
        productsCollection = db.collection(COLLECTION_NAME);
    }

    /**
     * Add a new product to the database
     * @param product The product to add
     * @return Task<DocumentReference> containing the reference to the new document
     */
    public Task<DocumentReference> addProduct(Product product) {
        return productsCollection.add(product)
                .addOnSuccessListener(documentReference -> {
                    Log.d(TAG, "Product added with ID: " + documentReference.getId());
                })
                .addOnFailureListener(e -> {
                    Log.e(TAG, "Error adding product", e);
                });
    }

    /**
     * Example of how to add a new product
     * Usage:
     * ProductService productService = new ProductService();
     * Product newProduct = new Product(
     *     null,  // ID will be generated by Firestore
     *     "Product Name",
     *     "Product Description",
     *     29.99,  // Price
     *     50,     // Stock quantity
     *     "Category",
     *     "Brand",
     *     "https://example.com/image.jpg",
     *     true    // Available
     * );
     * productService.addProduct(newProduct);
     */
    public void addProductExample() {
        Product newProduct = new Product(
            null,  // ID will be generated by Firestore
            "New Hair Product",
            "This is a new hair product description",
            29.99,
            50,
            "Category",
            "Brand",
            "https://example.com/image.jpg",
            true
        );
        
        addProduct(newProduct);
    }

    // Get all products
    public Task<QuerySnapshot> getAllProducts() {
        return productsCollection.get();
    }

    // Get products by category
    public Task<QuerySnapshot> getProductsByCategory(String category) {
        return productsCollection
                .whereEqualTo("category", category)
                .get();
    }

    // Get product by ID
    public Task<DocumentSnapshot> getProductById(String productId) {
        return productsCollection.document(productId).get();
    }

    // Update product
    public Task<Void> updateProduct(String productId, Product product) {
        return productsCollection.document(productId)
                .set(product)
                .addOnSuccessListener(aVoid -> {
                    Log.d(TAG, "Product updated successfully");
                })
                .addOnFailureListener(e -> {
                    Log.e(TAG, "Error updating product", e);
                });
    }

    // Delete product
    public Task<Void> deleteProduct(String productId) {
        return productsCollection.document(productId)
                .delete()
                .addOnSuccessListener(aVoid -> {
                    Log.d(TAG, "Product deleted successfully");
                })
                .addOnFailureListener(e -> {
                    Log.e(TAG, "Error deleting product", e);
                });
    }

    // Search products by name
    public Task<QuerySnapshot> searchProducts(String searchTerm) {
        return productsCollection
                .whereGreaterThanOrEqualTo("name", searchTerm)
                .whereLessThanOrEqualTo("name", searchTerm + '\uf8ff')
                .get();
    }

    // Get available products
    public Task<QuerySnapshot> getAvailableProducts() {
        return productsCollection
                .whereEqualTo("isAvailable", true)
                .get();
    }

    // Update stock amount
    public Task<Void> updateStockAmount(String productId, int newAmount) {
        return productsCollection.document(productId)
                .update("stockAmount", newAmount)
                .addOnSuccessListener(aVoid -> {
                    Log.d(TAG, "Stock amount updated successfully");
                })
                .addOnFailureListener(e -> {
                    Log.e(TAG, "Error updating stock amount", e);
                });
    }
} 